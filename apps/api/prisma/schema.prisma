// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id           Int           @id @default(autoincrement())
  fullName     String
  email        String
  password     String
  referralCode String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         String
  points       Point[]
  Event        Event[]
  rewards      Reward[]
  UserVoucher  UserVoucher[]
  Voucher      Voucher[]
  Transaction  Transaction[]

  @@map("users")
}

enum Role {
  customer
  organizer

  @@map("roles")
}

model Point {
  id        Int       @id @default(autoincrement())
  total     Int
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("points")
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String        @unique
  price       Int
  location    String
  description String        @db.LongText()
  stock       Int
  booked      Int?
  isFree      Boolean?
  startEvent  DateTime
  endEvent    DateTime
  category    String
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  thumbnail   String
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  @@map("events")
}

model Reward {
  id      Int  @id @default(autoincrement())
  rewards Int
  user    User @relation(fields: [userId], references: [id])
  userId  Int  @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiredDate DateTime @updatedAt

  @@map("rewards")
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean

  user        User          @relation(fields: [userId], references: [id])
  voucher     Voucher       @relation(fields: [voucherId], references: [id])
  Transaction Transaction[]

  @@map("userVouchers")
}

model Voucher {
  id             Int      @id @default(autoincrement())
  code           String
  discountAmount Int
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int

  user        User          @relation(fields: [userId], references: [id])
  UserVoucher UserVoucher[]

  @@map("vouchers")
}

model Transaction {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  amount        Int
  total         Int
  event         Event       @relation(fields: [eventId], references: [id])
  eventId       Int
  paymentProof  String?
  isPointUse    Boolean
  isUseVoucher  Boolean
  status        String      @default("Pending")
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  userVoucher   UserVoucher @relation(fields: [userVoucherId], references: [id])
  userVoucherId Int

  @@map("transactions")
}
